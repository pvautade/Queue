package queue;

import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.ArrayDeque;

public class PerformanceAnalysis {

    public static void main(String[] args) {
        int numberOfTasks = 1_000_000;

     
        LinkedList<Task> linkedListQueue = new LinkedList<>();
        long startTime = System.nanoTime();
        for (int i = 0; i < numberOfTasks; i++) {
            linkedListQueue.add(new Task(i, "Task " + i, i % 10));
        }
        long endTime = System.nanoTime();
        System.out.println("LinkedList enqueue time: " + (endTime - startTime) + " ns");

        startTime = System.nanoTime();
        linkedListQueue.peek();
        endTime = System.nanoTime();
        System.out.println("LinkedList peek time: " + (endTime - startTime) + " ns");

        startTime = System.nanoTime();
        linkedListQueue.poll();
        endTime = System.nanoTime();
        System.out.println("LinkedList dequeue time: " + (endTime - startTime) + " ns");

       
        PriorityQueue<Task> priorityQueue = new PriorityQueue<>();
        startTime = System.nanoTime();
        for (int i = 0; i < numberOfTasks; i++) {
            priorityQueue.add(new Task(i, "Task " + i, i % 10));
        }
        endTime = System.nanoTime();
        System.out.println("PriorityQueue enqueue time: " + (endTime - startTime) + " ns");

        startTime = System.nanoTime();
        priorityQueue.peek();
        endTime = System.nanoTime();
        System.out.println("PriorityQueue peek time: " + (endTime - startTime) + " ns");

        startTime = System.nanoTime();
        priorityQueue.poll();
        endTime = System.nanoTime();
        System.out.println("PriorityQueue dequeue time: " + (endTime - startTime) + " ns");

       
        ArrayDeque<Task> arrayDequeQueue = new ArrayDeque<>();
        startTime = System.nanoTime();
        for (int i = 0; i < numberOfTasks; i++) {
            arrayDequeQueue.add(new Task(i, "Task " + i, i % 10));
        }
        endTime = System.nanoTime();
        System.out.println("ArrayDeque enqueue time: " + (endTime - startTime) + " ns");

        startTime = System.nanoTime();
        arrayDequeQueue.peek();
        endTime = System.nanoTime();
        System.out.println("ArrayDeque peek time: " + (endTime - startTime) + " ns");

        startTime = System.nanoTime();
        arrayDequeQueue.poll();
        endTime = System.nanoTime();
        System.out.println("ArrayDeque dequeue time: " + (endTime - startTime) + " ns");
    }
}